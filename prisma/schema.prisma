// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Company {
  id        String      @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String @unique
  desc      String @db.Text
  logo     String?
  website   String? @unique
  mainAdress  String?
  phone     String? @unique
  location   Int?
  users      User [] 
  locations   Location []
  reports  Report []
  patients  Patient []
  
}

model Location {
  id        String      @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  address   String
  city      String
  state     String?
  zip       String?
  companyId  String
  company  Company @relation(fields: [companyId], references: [id])
  users      User []
  reports  Report []
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  clerkId   String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  email     String
  username  String  @unique
  specialty String? 
  phone     String?
  bio       String?
  image     String?
  website   String?
  role      Role     @default(USER)
  companyId  String
  locationId  String
  @@unique([clerkId])
  company  Company @relation(fields: [companyId], references: [id])
  location Location @relation(fields: [locationId], references: [id])
  reports  Report []
  patients  Patient []

}

model Report {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  diagnosis   String?
  content   String @db.Text
  completed Boolean @default(false)
  viewCount Int @default(0)
  clerkId    String
  companyId  String
  locationId  String
  pateintId   String 
  user    User @relation(fields: [clerkId], references: [clerkId])
  company  Company @relation(fields: [companyId], references: [id])
  location Location @relation(fields: [locationId], references: [id])
  patient  Patient @relation(fields: [pateintId], references: [id])
  @@index([pateintId,clerkId])
}

model Patient {
  id        String      @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pateintName      String
  email     String? @unique
  phone     String? @unique
  address   String?
  city      String?
  state     String?
  zip       String?
  dob       DateTime?
  gender    String?
  companyId  String
  clerkId    String?
  company  Company @relation(fields: [companyId], references: [id])
  users    User? @relation(fields: [clerkId], references: [clerkId])
  reports  Report []

  @@index([companyId])
}

model Task {
  id String @id @default(uuid())
  content String
  createdAt DateTime @default(now())
  completed Boolean @default(false)
}

model Job {
  id        String      @id @default(uuid())
  clerkId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  position    String
  company   String
  location  String
  status      String
  mode     String
}

model Tour {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  city String
  country String
  title String
  description String @db.Text
  image String? @db.Text
  stops Json
  @@unique([city,country])
}

model Token {
  clerkId String @id
  tokens Int @default (1000)
}